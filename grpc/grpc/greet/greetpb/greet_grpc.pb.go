// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package greetpb

import (
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GreetServeceClient is the client API for GreetServece service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetServeceClient interface {
}

type greetServeceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetServeceClient(cc grpc.ClientConnInterface) GreetServeceClient {
	return &greetServeceClient{cc}
}

// GreetServeceServer is the server API for GreetServece service.
// All implementations must embed UnimplementedGreetServeceServer
// for forward compatibility
type GreetServeceServer interface {
	mustEmbedUnimplementedGreetServeceServer()
}

// UnimplementedGreetServeceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetServeceServer struct {
}

func (UnimplementedGreetServeceServer) mustEmbedUnimplementedGreetServeceServer() {}

// UnsafeGreetServeceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetServeceServer will
// result in compilation errors.
type UnsafeGreetServeceServer interface {
	mustEmbedUnimplementedGreetServeceServer()
}

func RegisterGreetServeceServer(s grpc.ServiceRegistrar, srv GreetServeceServer) {
	s.RegisterService(&_GreetServece_serviceDesc, srv)
}

var _GreetServece_serviceDesc = grpc.ServiceDesc{
	ServiceName: "greet.GreetServece",
	HandlerType: (*GreetServeceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "grpc/greet/greetpb/greet.proto",
}
